buildscript {
	repositories {
		mavenCentral();
		maven {
			name = "sonatype";
			url = "https://oss.sonatype.org/content/repositories/snapshots/";
		}
		maven {
			url "https://plugins.gradle.org/m2/";
		}
	}
}

plugins {
    id 'org.cadixdev.licenser' version '0.6.1'
}

apply plugin: "java";
apply plugin: "eclipse";
apply plugin: "maven-publish";
apply plugin: "signing";

group = "blue.endless";
archivesBaseName = "Jankson";
version = "2.0.0-alpha.2";

repositories {
	mavenCentral();
}

java {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_21
}

jar {
	manifest {
		attributes(
			"Automatic-Module-Name" : "jankson"
		);
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = "sources"
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = "javadoc"
	from javadoc.destinationDir
}

javadoc {
	failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
}

def versionSuffix = ''
if (System.env.BUILD_NUMBER) {
	versionSuffix = '-'+System.env.BUILD_NUMBER;
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

publishing {
	publications {
		mavenPrimary(MavenPublication) {
			from components.java;

			groupId project.group;
			artifactId "jankson";
			version project.version+versionSuffix;
			artifact sourcesJar;
			artifact javadocJar;
			
			pom {
				name = "Jankson";
				description = "JSON5 / HJSON parser and preprocessor which preserves ordering and comments";
				url = "https://github.com/falkreon/Jankson";
				
				developers {
					developer {
						id = "falkreon"
						name = "Isaac Ellingson"
						email = "falkreon@gmail.com"
					}
				}
				
				licenses {
					license {
						name = "MIT License"
						url = "https://opensource.org/licenses/MIT"
						distribution = "repo"
					}
				}
				
				scm {
					url = "https://github.com/falkreon/Jankson"
					connection = "scm:git:git@github.com:falkreon/Jankson.git"
					developerConnection = "scm:git:git@github.com:falkreon/Jankson.git"
				}
			}
		}
	}
	
	repositories {
		if (project.hasProperty("ossrhUsername")) {
			maven {
				def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
				def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
				url = releasesRepoUrl; //version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
				
				credentials {
					username = ossrhUsername
					password = ossrhPassword
				}
				
			}
		}
	}
}

if (file("private.gradle").exists()) {
	apply from: "private.gradle";
}

defaultTasks "clean", "build", "sourcesJar";


dependencies {
	testImplementation(platform('org.junit:junit-bom:5.9.2'))
	testImplementation('org.junit.jupiter:junit-jupiter')
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	compileOnly group: "com.google.code.findbugs", name: "jsr305", version: "3.0.2";
	testImplementation group: "com.google.code.findbugs", name: "jsr305", version: "3.0.2";
}

signing {
	if (project.hasProperty("signing.keyId")) {
		println("Key credentials found. Enabling jar signing.");
		sign configurations.archives;
		sign publishing.publications.mavenPrimary
	} else {
		println("Skipping jar signing");
	}
}
